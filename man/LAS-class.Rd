% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Class-LAS.R, R/methods-LAS.R
\docType{class}
\name{LAS-class}
\alias{LAS-class}
\alias{LAS}
\title{An S4 class to represent a .las or .laz file}
\usage{
LAS(data, header = list(), proj4string = sp::CRS(), check = TRUE, type = NA)
}
\arguments{
\item{data}{a \link[data.table:data.table]{data.table} containing the data of a las or laz file.}

\item{header}{a \code{list} or a \link[=LASheader-class]{LASheader} containing the header of
a las or laz file.}

\item{proj4string}{projection string of class \link[sp:CRS-class]{CRS-class}.}

\item{check}{logical. Conformity tests while building the object.}

\item{type}{numeric or character. 0 to 5 or to 10 to 15 or one of 'ALS', 'TLS', 'UAV', 'DAP'.
Can be prefixed with 'n' such as 'nALS' to tell it is normalized.}
}
\value{
An object of class \code{LAS}
}
\description{
Class LAS is the representation of a las/laz file according to the
\href{http://www.asprs.org/a/society/committees/standards/LAS_1_4_r13.pdf}{LAS file format specifications}.
}
\details{
A \code{LAS} object inherits a \link[sp:Spatial-class]{Spatial} object from \code{sp}. Thus it is
a \code{Spatial} object plus a \code{data.table} with the data read from a \code{las/laz} file and
a \link[=LASheader-class]{LASheader} (see the ASPRS documentation for the
\href{http://www.asprs.org/a/society/committees/standards/LAS_1_4_r13.pdf}{LAS file format}
for more information). Because las files are standardized the table of attributes read from the las/laz file
is also standardized. Columns are named:
\itemize{
\item{\code{X} (numeric)}
\item{\code{Y} (numeric)}
\item{\code{Z} (numeric)}
\item{\code{gpstime} (numeric)}
\item{\code{Intensity} (integer)}
\item{\code{ReturnNumber} (integer)}
\item{\code{NumberOfReturns} (integer)}
\item{\code{ScanDirectionFlag} (integer)}
\item{\code{EdgeOfFlightline} (integer)}
\item{\code{Classification} (integer)}
\item{\code{Synthetic_flag} (logical)}
\item{\code{Keypoint_flag} (logical)}
\item{\code{Withheld_flag} (logical)}
\item{\code{ScanAngleRank} (integer)}
\item{\code{ScanAngle} (numeric)}
\item{\code{UserData} (integer)}
\item{\code{PointSourceID} (integer)}
\item{\code{R,G,b} (integer)}
\item{\code{NIR} (integer)}
}
}
\section{Functions}{
\itemize{
\item \code{LAS}: creates objects of class LAS. The original data is updated by reference to
quantize the coordinates according to the scale factor of the header if no header is provided.
In this case the scale factor is set to 0.001
}}

\section{Slots}{

\describe{
\item{\code{bbox}}{Object of class \code{matrix}, with bounding box}

\item{\code{proj4string}}{Object of class \link[sp:CRS-class]{CRS}, projection string}

\item{\code{data}}{Object of class \link[data.table:data.table]{data.table}. Point cloud data according to the
\href{http://www.asprs.org/a/society/committees/standards/LAS_1_4_r13.pdf}{LAS file format}}

\item{\code{header}}{Object of class \link[=LASheader-class]{LASheader}. las file header according to the
\href{http://www.asprs.org/a/society/committees/standards/LAS_1_4_r13.pdf}{LAS file format}}

\item{\code{type}}{integer. A number that corresponds to a point cloud type. 0 unknown (legacy
with older version of lidR); 1 ALS; 2 TLS; 3 UAV; 4 DAP; 5 Multispectral ALS ;
10:15 Normalized version of each types. This information is not critical for
working with lidR but it is uses when building a spatial index in some functions
that require spatial indexing to build an optimized index type. Setting the
correct type can speed-up some operations. Setting the wrong type may slow down
some operation for example if an ALS point cloud is declared TLS. Types 0 and 1
are actually equivalent and correspond to legacy behaviour. For example if a TLS
point cloud is tagged ALS the processing will be similar to processing in
version < 3.1.0 without degradation of the performances.}
}}

\section{Extends}{

Class  \link[sp:Spatial-class]{Spatial}, directly.
}

\examples{
# Read a las/laz file
LASfile <- system.file("extdata", "Megaplot.laz", package="lidR")
las <- readLAS(LASfile)
las

# Creation of a LAS object out of external data
data <- data.frame(X = runif(100, 0, 100),
                   Y = runif(100, 0, 100),
                   Z = runif(100, 0, 20))

# 'data' has many decimal digits
data

# Create a default header and quantize *by reference*
# the coordinates to fit with offset and scale factors
cloud <- LAS(data)

# 'data' has been updated and coordinates were quantized
data
cloud

# Be careful when providing a header the function assumes that
# it corresponds to the data and won't quantize the coordinates
data <- data.frame(X = runif(100, 0, 100),
                   Y = runif(100, 0, 100),
                   Z = runif(100, 0, 20))

header <- las@header

# This works
cloud <- LAS(data, header)

# But creates an invalid LAS object
las_check(cloud)
}
\seealso{
\link{readLAS}
}
